// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgCreateDelegatedAmount } from "./types/point/lockenomics/tx";
import { MsgUpdateDelegatedAmount } from "./types/point/lockenomics/tx";
import { MsgDeleteDelegatedAmount } from "./types/point/lockenomics/tx";
import { MsgCreateLock } from "./types/point/lockenomics/tx";


export { MsgCreateDelegatedAmount, MsgUpdateDelegatedAmount, MsgDeleteDelegatedAmount, MsgCreateLock };

type sendMsgCreateDelegatedAmountParams = {
  value: MsgCreateDelegatedAmount,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateDelegatedAmountParams = {
  value: MsgUpdateDelegatedAmount,
  fee?: StdFee,
  memo?: string
};

type sendMsgDeleteDelegatedAmountParams = {
  value: MsgDeleteDelegatedAmount,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateLockParams = {
  value: MsgCreateLock,
  fee?: StdFee,
  memo?: string
};


type msgCreateDelegatedAmountParams = {
  value: MsgCreateDelegatedAmount,
};

type msgUpdateDelegatedAmountParams = {
  value: MsgUpdateDelegatedAmount,
};

type msgDeleteDelegatedAmountParams = {
  value: MsgDeleteDelegatedAmount,
};

type msgCreateLockParams = {
  value: MsgCreateLock,
};


export const registry = new Registry(msgTypes);

const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgCreateDelegatedAmount({ value, fee, memo }: sendMsgCreateDelegatedAmountParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateDelegatedAmount: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateDelegatedAmount({ value: MsgCreateDelegatedAmount.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateDelegatedAmount: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateDelegatedAmount({ value, fee, memo }: sendMsgUpdateDelegatedAmountParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateDelegatedAmount: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateDelegatedAmount({ value: MsgUpdateDelegatedAmount.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateDelegatedAmount: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeleteDelegatedAmount({ value, fee, memo }: sendMsgDeleteDelegatedAmountParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeleteDelegatedAmount: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDeleteDelegatedAmount({ value: MsgDeleteDelegatedAmount.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeleteDelegatedAmount: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateLock({ value, fee, memo }: sendMsgCreateLockParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateLock: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCreateLock({ value: MsgCreateLock.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateLock: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgCreateDelegatedAmount({ value }: msgCreateDelegatedAmountParams): EncodeObject {
			try {
				return { typeUrl: "/point.lockenomics.MsgCreateDelegatedAmount", value: MsgCreateDelegatedAmount.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateDelegatedAmount: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateDelegatedAmount({ value }: msgUpdateDelegatedAmountParams): EncodeObject {
			try {
				return { typeUrl: "/point.lockenomics.MsgUpdateDelegatedAmount", value: MsgUpdateDelegatedAmount.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateDelegatedAmount: Could not create message: ' + e.message)
			}
		},
		
		msgDeleteDelegatedAmount({ value }: msgDeleteDelegatedAmountParams): EncodeObject {
			try {
				return { typeUrl: "/point.lockenomics.MsgDeleteDelegatedAmount", value: MsgDeleteDelegatedAmount.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeleteDelegatedAmount: Could not create message: ' + e.message)
			}
		},
		
		msgCreateLock({ value }: msgCreateLockParams): EncodeObject {
			try {
				return { typeUrl: "/point.lockenomics.MsgCreateLock", value: MsgCreateLock.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateLock: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			PointLockenomics: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;